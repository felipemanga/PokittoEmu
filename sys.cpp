#include "types.hpp"
#include <iostream>
#include "sys.hpp"
#include "cpu.hpp"

namespace SYS {
    u32 vtorReset;
    u32 VTOR, AIRCR, NVIC_ISER=0;

    u32 reserved;
    
    u32 SYSMEMREMAP, PRESETCTRL, SYSPLLCTRL=0x23, SYSPLLSTAT, USBPLLCTRL, USBPLLSTAT, RTCOSCCTRL, SYSOSCCTRL, WDTOSCCTRL, IRCCTRL, SYSRSTSTAT, SYSPLLCLKSEL, SYSPLLCLKUEN, USBPLLCLKSEL, USBPLLCLKUEN, MAINCLKSEL, MAINCLKUEN, SYSAHBCLKDIV, SYSAHBCLKCTRL, SSP0CLKDIV, USART0CLKDIV, SSP1CLKDIV, FRGCLKDIV, USBCLKSEL, USBCLKUEN, USBCLKDIV, CLKOUTSEL, CLKOUTUEN, CLKOUTDIV, UARTFRGDIV, UARTFRGMULT, EXTTRACECMD, PIOPORCAP0, PIOPORCAP1, PIOPORCAP2, IOCONCLKDIV6, IOCONCLKDIV5, IOCONCLKDIV4, IOCONCLKDIV3, IOCONCLKDIV2, IOCONCLKDIV1, IOCONCLKDIV0, BODCTRL, SYSTCKCAL, IRQLATENCY, NMISRC, PINTSEL0, PINTSEL1, PINTSEL2, PINTSEL3, PINTSEL4, PINTSEL5, PINTSEL6, PINTSEL7, USBCLKCTRL, USBCLKST, STARTERP0, STARTERP1, PDSLEEPCFG, PDAWAKECFG, PDRUNCFG, DEVICE_ID;
    
    MMU::Register map[] = {
	MMUREG( SYSMEMREMAP ),
	MMUREG( PRESETCTRL ),
	MMUREG( SYSPLLCTRL ),
	MMUREG( SYSPLLSTAT ),
	MMUREG( USBPLLCTRL ),
	MMUREG( USBPLLSTAT ),
	MMUREGX(),
	MMUREG( RTCOSCCTRL ),
	MMUREG( SYSOSCCTRL ),
	MMUREG( WDTOSCCTRL ),
	MMUREG( IRCCTRL ),
	MMUREGX(),
	MMUREG( SYSRSTSTAT ),
	MMUREGX(),
	MMUREGX(),
	MMUREGX(),
	MMUREG( SYSPLLCLKSEL ),
	MMUREG( SYSPLLCLKUEN ),
	MMUREG( USBPLLCLKSEL ),
	MMUREG( USBPLLCLKUEN ),
	MMUREGX(),	MMUREGX(),	MMUREGX(),	MMUREGX(),
	MMUREGX(),	MMUREGX(),	MMUREGX(),	MMUREGX(),
	MMUREG( MAINCLKSEL ),
	MMUREG( MAINCLKUEN ),
	MMUREG( SYSAHBCLKDIV ),
	MMUREGX(),
	MMUREG( SYSAHBCLKCTRL ),
	MMUREGX(),	MMUREGX(),	MMUREGX(),	MMUREGX(),
	MMUREG( SSP0CLKDIV ),
	MMUREG( USART0CLKDIV ),
	MMUREG( SSP1CLKDIV ),
	MMUREG( FRGCLKDIV ),
	MMUREGX(),	MMUREGX(),	MMUREGX(),
	MMUREGX(),	MMUREGX(),	MMUREGX(),	MMUREGX(),
	MMUREG( USBCLKSEL ),
	MMUREG( USBCLKUEN ),
	MMUREG( USBCLKDIV ),
	MMUREGX(),	MMUREGX(),	MMUREGX(),	MMUREGX(),
	MMUREGX(),
	MMUREG( CLKOUTSEL ),
	MMUREG( CLKOUTUEN ),
	MMUREG( CLKOUTDIV ),
	MMUREGX(),
	MMUREG( UARTFRGDIV ),
	MMUREG( UARTFRGMULT ),
	MMUREGX(),
	MMUREG( EXTTRACECMD ),
	MMUREG( PIOPORCAP0 ),
	MMUREG( PIOPORCAP1 ),
	MMUREG( PIOPORCAP2 ),
	MMUREGX(),MMUREGX(),MMUREGX(),MMUREGX(),
	MMUREGX(),MMUREGX(),MMUREGX(),MMUREGX(),
	MMUREGX(),MMUREGX(),
	MMUREG( IOCONCLKDIV6 ),
	MMUREG( IOCONCLKDIV5 ),
	MMUREG( IOCONCLKDIV4 ),
	MMUREG( IOCONCLKDIV3 ),
	MMUREG( IOCONCLKDIV2 ),
	MMUREG( IOCONCLKDIV1 ),
	MMUREG( IOCONCLKDIV0 ),
	MMUREG( BODCTRL ),
	MMUREG( SYSTCKCAL ),
	MMUREGX(),MMUREGX(),MMUREGX(),MMUREGX(),
	MMUREGX(),MMUREGX(),
	MMUREG( IRQLATENCY ),
	MMUREG( NMISRC ),
	MMUREG( PINTSEL0 ),
	MMUREG( PINTSEL1 ),
	MMUREG( PINTSEL2 ),
	MMUREG( PINTSEL3 ),
	MMUREG( PINTSEL4 ),
	MMUREG( PINTSEL5 ),
	MMUREG( PINTSEL6 ),
	MMUREG( PINTSEL7 ),
	MMUREG( USBCLKCTRL ),
	MMUREG( USBCLKST ),
	MMUREGX(),
	MMUREGX(),MMUREGX(),MMUREGX(),MMUREGX(),
	MMUREGX(),MMUREGX(),MMUREGX(),MMUREGX(),
	MMUREGX(),MMUREGX(),MMUREGX(),MMUREGX(),
	MMUREGX(),MMUREGX(),MMUREGX(),MMUREGX(),
	MMUREGX(),MMUREGX(),MMUREGX(),MMUREGX(),
	MMUREGX(),MMUREGX(),MMUREGX(),MMUREGX(),
	MMUREG( STARTERP0 ),
	MMUREGX(),MMUREGX(),MMUREGX(),
	MMUREG( STARTERP1 ),
	MMUREGX(),MMUREGX(),MMUREGX(),MMUREGX(),
	MMUREGX(),MMUREGX(),
	MMUREG( PDSLEEPCFG ),
	MMUREG( PDAWAKECFG ),
	MMUREG( PDRUNCFG ),
	MMUREGX(),MMUREGX(),MMUREGX(),MMUREGX(),
	MMUREGX(),MMUREGX(),MMUREGX(),MMUREGX(),
	MMUREGX(),MMUREGX(),MMUREGX(),MMUREGX(),
	MMUREGX(),MMUREGX(),MMUREGX(),MMUREGX(),
	MMUREGX(),MMUREGX(),MMUREGX(),MMUREGX(),
	MMUREGX(),MMUREGX(),MMUREGX(),MMUREGX(),
	MMUREGX(),MMUREGX(),MMUREGX(),MMUREGX(),
	MMUREGX(),MMUREGX(),MMUREGX(),MMUREGX(),
	MMUREGX(),MMUREGX(),MMUREGX(),MMUREGX(),
	MMUREGX(),MMUREGX(),MMUREGX(),MMUREGX(),
	MMUREGX(),MMUREGX(),MMUREGX(),MMUREGX(),
	MMUREGX(),MMUREGX(),MMUREGX(),MMUREGX(),
	MMUREGX(),MMUREGX(),MMUREGX(),MMUREGX(),
	MMUREGX(),MMUREGX(),MMUREGX(),MMUREGX(),
	MMUREGX(),MMUREGX(),MMUREGX(),MMUREGX(),
	MMUREGX(),MMUREGX(),MMUREGX(),MMUREGX(),
	MMUREGX(),MMUREGX(),MMUREGX(),MMUREGX(),
	MMUREGX(),MMUREGX(),MMUREGX(),MMUREGX(),
	MMUREGX(),MMUREGX(),MMUREGX(),MMUREGX(),
	MMUREGX(),MMUREGX(),MMUREGX(),MMUREGX(),
	MMUREGX(),MMUREGX(),MMUREGX(),MMUREGX(),
	MMUREGX(),MMUREGX(),MMUREGX(),MMUREGX(),
	MMUREGX(),MMUREGX(),MMUREGX(),MMUREGX(),
	MMUREGX(),MMUREGX(),MMUREGX(),MMUREGX(),
	MMUREGX(),MMUREGX(),MMUREGX(),MMUREGX(),
	MMUREGX(),MMUREGX(),MMUREGX(),MMUREGX(),
	MMUREGX(),MMUREGX(),MMUREGX(),MMUREGX(),
	MMUREGX(),MMUREGX(),
	MMUREGDBG( DEVICE_ID )
    };

    MMU::Layout layout = {
	0x40048000,
	sizeof(map) / sizeof(map[0]),
	map
    };

    void init(){
	SYSMEMREMAP = 0;
	VTOR = vtorReset;
	SYSPLLCLKUEN = 1;
	SYSPLLSTAT = 1;
	MAINCLKUEN = 1;
	SYSAHBCLKCTRL = 0x8004857;
	SYSAHBCLKDIV = 1;
	USBPLLCLKUEN = 1;
	USBPLLSTAT = 1;
/*
	for( u32 i=0; i<sizeof(map)/sizeof(map[0]); ++i ){
	    std::cout << map[i].name
		      << " "
		      << std::hex
		      << (layout.base+(i*4))
		      << std::endl;
	}
*/
    }

    u32 update(){
	if( AIRCR&4 ){
	    AIRCR = 0x05FA0000;
	    CPU::reset();
	}
	
	return ~0;
    }
    
}

